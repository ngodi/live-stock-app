{"version":3,"sources":["components/TimeAgo.js","components/StockTable.js","components/MyChart.js","Stocks.js","utils/utils.js","App.js","index.js"],"names":["TimeAgo","useState","Date","date","timeAgo","useTimeAgo","getTime","StockTable","ticker","color","className","Object","keys","map","key","value","MyChart","chartType","width","height","data","this","props","React","Component","response","chartData","role","Stocks","setTicker","setColor","useEffect","ws","WebSocket","onopen","console","log","onmessage","event","forEach","element","ke","toUpperCase","val","toFixed","prevColor","prevTicker","updateData","JSON","parse","chartItems","entries","item","push","formatChartData","onclose","close","App","toDateString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAgBeA,EAVC,WAAO,IAAD,EACMC,mBAAS,IAAIC,MADnB,mBACXC,EADW,KAEZC,GAFY,KAEFC,YAAWF,EAAKG,UAAY,OAC5C,OACE,oCACGF,ICqBMG,EA5BI,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,MAC5B,OACE,yBAAKC,UAAU,eACZ,+BACK,+BACI,4BACI,sCACA,qCACA,6CAGR,+BAEIC,OAAOC,KAAKJ,GAAQK,KAAI,SAASC,EAAKC,GAClC,OACA,wBAAID,IAAKA,GACL,wBAAIJ,UAAU,aAAaI,GAC3B,wBAAIJ,UAAWD,EAAMK,IAAON,EAAOM,IACnC,wBAAIJ,UAAU,gBAAe,kBAAC,EAAD,e,wCCHtCM,E,uKAbX,OACE,yBAAKN,UAAU,SACb,kBAAC,IAAD,CACEO,UAAU,cACVC,MAAM,QACNC,OAAO,QACPC,KAAMC,KAAKC,MAAMF,Y,GARLG,IAAMC,WCIxBC,G,MAAW,IACXC,EAAY,CAAE,CAAC,UAAW,QAAS,CAAEC,KAAM,UAAY,CAAC,GAAI,EAAG,KAgCpDC,EA/BA,WAAO,IAAD,EACY3B,mBAAS,IADrB,mBACTO,EADS,KACDqB,EADC,OAEU5B,mBAAS,IAFnB,mBAETQ,EAFS,KAEFqB,EAFE,KAuBpB,OAnBGC,qBAAU,WACR,IAAMC,EAAK,IAAIC,UAAU,4BAazB,OAZAD,EAAGE,OAAS,WACVC,QAAQC,IAAI,cAEdJ,EAAGK,UAAY,SAACC,ICnBI,SAACb,EAAUjB,EAAQqB,EAAWC,GACpDL,EAASc,SAAQ,SAAAC,GACb,IAAIC,EAAKD,EAAQ,GAAGE,cAChBC,EAAMH,EAAQ,GAAGI,QAAQ,GACZ,MAAdpC,EAAOiC,KAGFE,GAAOnC,EAAOiC,GACrBX,GAAS,SAAAe,GAAS,sBACbA,EADa,eAEfJ,EAAK,kBAENX,GAAS,SAAAe,GAAS,sBACbA,EADa,eAEfJ,EAAK,iBAEXZ,GAAU,SAAAiB,GAAU,sBAChBA,EADgB,eAElBL,EAAIE,WDGNI,CADFtB,EAAWuB,KAAKC,MAAMX,EAAMlB,MACLZ,EAAQqB,EAAWC,GACxCJ,ECCuB,SAAClB,EAAQkB,GACtC,IAAIwB,EAAavC,OAAOwC,QAAQ3C,GAUlC,OARE0C,EAAWrC,KAAI,SAAAuC,GACVA,EAAKC,KAAK,WAEjB3B,EAAY,CAAE,CAAC,UAAW,QAAS,CAAEC,KAAM,UAAY,CAAC,GAAI,EAAG,KAE7DuB,EAAWrC,KAAI,SAAAuC,GACb1B,EAAU2B,KAAKD,MAEZ1B,EDZa4B,CAAgB9C,EAAQkB,IAEtCM,EAAGuB,QAAU,WACX,IAAItB,UAAU,6BAGT,WACLD,EAAGwB,WAEL,CAAChD,IAGJ,yBAAKE,UAAU,SACZ,kBAAC,EAAD,CAASU,KAAMM,IACZD,EAAmC,kBAAC,EAAD,CAAYjB,OAAQA,EAAQC,MAAOA,IAA3D,uB,MEpBLgD,MAZf,WACE,OACE,yBAAK/C,UAAU,OACb,8CAEI,IAAIR,MAAQwD,gBAEhB,kBAAC,EAAD,QCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d4e8465d.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'react';\r\n\r\nimport useTimeAgo from \"@rooks/use-time-ago\";\r\n\r\n\r\nconst TimeAgo = () => {\r\n    const [date, setDate] = useState(new Date());\r\n    const timeAgo = useTimeAgo(date.getTime() - 1000 * 12);\r\n    return (\r\n      <>\r\n        {timeAgo}\r\n      </>\r\n    );\r\n}\r\n\r\nexport default TimeAgo;","import React from 'react';\r\nimport TimeAgo from './TimeAgo';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StockTable = ({ ticker, color}) => {\r\n  return (\r\n    <div className=\"stock-table\">\r\n       <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Ticker</th>\r\n                    <th>Price</th>\r\n                    <th>Last Update</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                Object.keys(ticker).map(function(key, value) {\r\n                    return (\r\n                    <tr key={key}>\r\n                        <td className=\"item-name\">{key}</td>\r\n                        <td className={color[key]}>{ticker[key]}</td>\r\n                        <td className=\"elapsed-time\"><TimeAgo /></td>\r\n                    </tr>\r\n                    )\r\n                })\r\n                }\r\n            </tbody>\r\n       </table>\r\n   </div>\r\n  )\r\n}\r\nexport default StockTable;\r\n\r\nStockTable.propTypes = {\r\n    color: PropTypes.object,\r\n    ticker: PropTypes.object\r\n}","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\n\r\nclass MyChart extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"chart\">\r\n        <Chart\r\n          chartType=\"ColumnChart\"\r\n          width=\"600px\"\r\n          height=\"400px\"\r\n          data={this.props.data}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyChart;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { updateData, formatChartData } from './utils/utils';\r\nimport StockTable from './components/StockTable';\r\nimport MyChart from './components/MyChart';\r\n\r\nimport './Stocks.scss';\r\n\r\nlet response = \"\";\r\nlet chartData = [ [\"Element\", \"Price\", { role: \"style\" }] ,[\"\", 0, \"\"] ] ;\r\nconst Stocks = () => {\r\n     const [ticker, setTicker] = useState({});\r\n     const [color, setColor] = useState({});\r\n         \r\n    useEffect(() => {\r\n      const ws = new WebSocket('ws://stocks.mnet.website');\r\n      ws.onopen = () => {\r\n        console.log(\"connected\");\r\n      };\r\n      ws.onmessage = (event) => {\r\n      response = JSON.parse(event.data);\r\n        updateData(response, ticker, setTicker, setColor);\r\n        chartData = formatChartData(ticker, chartData);\r\n       };\r\n      ws.onclose = () => {\r\n        new WebSocket('ws://stocks.mnet.website');\r\n      };\r\n  \r\n      return () => {\r\n        ws.close();\r\n      };\r\n    },[ticker]);\r\n\r\n return(\r\n   <div className=\"stock\">\r\n      <MyChart data={chartData}/>\r\n     { (!response)? \"....fetching data-\" :  <StockTable ticker={ticker} color={color} />}\r\n   </div>\r\n )\r\n  }\r\n  \r\nexport default Stocks;","export const updateData = (response, ticker, setTicker, setColor ) => {\r\n    response.forEach(element => {\r\n        let ke = element[0].toUpperCase();\r\n        let val = element[1].toFixed(2);\r\n        if(ticker[ke] == null){\r\n            \r\n        }\r\n        else if(val >= ticker[ke]){\r\n         setColor(prevColor => ({\r\n           ...prevColor,\r\n           [ke]: \"green-back\"\r\n         }))}else{\r\n           setColor(prevColor => ({\r\n             ...prevColor,\r\n             [ke]: \"red-back\"\r\n           }))}\r\n        setTicker(prevTicker => ({\r\n         ...prevTicker,\r\n         [ke]:val\r\n        }))\r\n      })\r\n}\r\n\r\nexport const formatChartData = (ticker, chartData) => {\r\n  let chartItems = Object.entries(ticker);\r\n  // eslint-disable-next-line\r\n  chartItems.map(item => {\r\n       item.push(\"blue\")\r\n  })\r\nchartData = [ [\"Element\", \"Price\", { role: \"style\" }] ,[\"\", 0, \"\"] ];\r\n// eslint-disable-next-line\r\n  chartItems.map(item => {\r\n    chartData.push(item)\r\n})\r\nreturn chartData;\r\n}","import React from 'react';\r\nimport Stocks from './Stocks';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>\r\n        Live Stocks  -\r\n        {(new Date()).toDateString()}\r\n      </h2>\r\n      <Stocks />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}